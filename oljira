#!/usr/bin/env ruby

require "optparse"
require "io/console"

require "bundler/setup"
require "mechanize"
require "keyring"


class JiraHandler
  USERNAME_KEYRING_SERVICE = "oljira-user"
  USERNAME_KEYRING_USER = "oljira-cli"
  PASSWORD_KEYRING_SERVICE = "oljira-password"

  def initialize(issue, options)
    @verbose = !!options[:verbose]
    @issue = issue
    choose_action(options)
    login(options)
  end

  def choose_action(options)
    @action = :start if options[:start]
    @action = :list if options[:list]
    @action = :title unless @action
  end

  def login(options)
    keyring = Keyring.new
    @username = keyring.get_password(USERNAME_KEYRING_SERVICE, USERNAME_KEYRING_USER)
    if !@username || options[:login]
      print "Username: "
      @username = STDIN.gets.chomp
      keyring.set_password(USERNAME_KEYRING_SERVICE, USERNAME_KEYRING_USER, @username)
    end
    @password = keyring.get_password(PASSWORD_KEYRING_SERVICE, @username)
    if !@password || options[:login]
      print "Password (not printed): "
      @password = STDIN.noecho(&:gets).chomp
      keyring.set_password(PASSWORD_KEYRING_SERVICE, @username, @password)
    end
  end

  def log(*args)
    puts args if @verbose
  end

  def list(jira_page)
    binding.pry
  end

  def require_issue(jira_page)
    if !jira_page.uri.to_s.end_with?(@issue)
      puts "Error: No such issue #{@issue}"
      exit -1
    end
  end

  def start(jira_page)
    system "git checkout -b topic/#{@issue}"
    log("Starting progress")
    jira_page.link_with(:text => "Start Progress")&.click
    log("Assigning to me")
    jira_page.link_with(:text => "Assign to me")&.click
  end

  def title(jira_page)
    puts jira_page.at("#summary-val").text
  end

  def action(jira_page)
    send @action, jira_page
  end

  # jira_page.link_with("Resolve Issue")
  # jira_page.link_with("Start Progress")
  # jira_page.link_with("Create branch")
  # jira_page.link_with("Create")

  def go
    agent = Mechanize.new do |agent|
      agent.user_agent_alias = 'Mac Safari'
      agent.follow_meta_refresh = true
    end

    agent.get("http://ol-jira.us.oracle.com/browse/#{@issue}") do |page|
      log(page.uri)
      sso_page = page.form_with(:name => "myForm")&.submit || page
      log(sso_page.uri)

      jira_page = sso_page.form_with(:name => "LoginForm") do |login_form|
        if login_form
          login_form.field_with(:name => "ssousername").value = "tim.felgentreff@oracle.com"
          login_form.field_with(:name => "password").value = "zhwdb7RHPN"
        end
      end&.submit || sso_page
      log(jira_page.uri)

      action(jira_page)
    end
  end

  def self.handle_commandline
    options = {}
    opt_object = nil
    OptionParser.new do |opts|
      opts.banner = "Usage: oljira <issue_id> [options]"

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options[:verbose] = v
      end

      opts.on("-s", "--start", "Create a branch and start working on this issue.") do |v|
        options[:start] = true
      end

      opts.on("-l", "--list", "List issues assigned to me.") do |v|
        options[:list] = true
      end

      opts.on("-a", "--authenticate", "Ask (again) for username and password.") do |v|
        options[:login] = true
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      opt_object = opts
    end.parse!

    issue = ARGV.shift

    unless issue
      `git rev-parse --abbrev-ref HEAD` =~ /(GR-\d+)/
      issue = $1
    end

    unless issue && ARGV.empty?
      puts opt_object
      exit
    end

    return issue, options
  end

  def self.go
    new(*self.handle_commandline).go
  end
end


JiraHandler.go
