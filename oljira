#!/usr/bin/env ruby

require "optparse"
require "io/console"
require "json"

require "pry"
require "bundler/setup"
require "mechanize"
require "keyring"
require "paint"


class JiraHandler
  USERNAME_KEYRING_SERVICE = "oljira-user"
  USERNAME_KEYRING_USER = "oljira-cli"
  PASSWORD_KEYRING_SERVICE = "oljira-password"

  def initialize(issue, options)
    @verbose = !!options[:verbose]
    @issue = issue
    choose_action(options)
    login(options)
  end

  def choose_action(options)
    @action = :start if options[:start]
    @action = :list if options[:list]
    @action = :show unless @action
  end

  def login(options)
    keyring = Keyring.new
    @username = keyring.get_password(USERNAME_KEYRING_SERVICE, USERNAME_KEYRING_USER)
    if !@username || options[:login]
      print "Username: "
      @username = STDIN.gets.chomp
      keyring.set_password(USERNAME_KEYRING_SERVICE, USERNAME_KEYRING_USER, @username)
    end
    @password = keyring.get_password(PASSWORD_KEYRING_SERVICE, @username)
    if !@password || options[:login]
      print "Password (not printed): "
      @password = STDIN.noecho(&:gets).chomp
      keyring.set_password(PASSWORD_KEYRING_SERVICE, @username, @password)
    end
  end

  def log(*args)
    puts args if @verbose
  end

  def list(jira_page)
    page = @agent.get("http://ol-jira.us.oracle.com/rest/api/latest/search?jql=assignee=currentuser()")
    results = JSON.parse(page.body)
    results["issues"].each do |issue|
      print_issue(issue)
    end
  end

  def print_issue(issue, detailed = false)
    i = issue["fields"]
    key = issue["key"]
    begin
      key = Paint[key, i["status"]["statusCategory"]["colorName"].to_sym]
    rescue
      key = Paint[key, :white]
    end
    components = Paint["(#{i["components"].map { |c| c["name"] }.join(", ")})", "666"]
    puts "#{key} '#{i['summary']}' -#{i['reporter']['displayName']} #{components}"

    if detailed
      if i['description']
        puts Paint["#{i['description']}\n", :white]
      end

      (i["comment"]&.[]("comments") || []).each do |comment|
        author = Paint["#{comment['author']['displayName']}", :white]
        body = Paint[comment['body']]
        puts "#{author}: #{body}\n\n"
      end
    end
  end

  def require_issue(jira_page)
    if !jira_page.uri.to_s.end_with?(@issue)
      puts "Error: No such issue #{@issue}"
      exit -1
    end
  end

  def start(jira_page)
    system "git checkout -b topic/#{@issue}"
    log("Starting progress")
    jira_page.link_with(:text => "Start Progress")&.click
    log("Assigning to me")
    jira_page.link_with(:text => "Assign to me")&.click
  end

  def show(jira_page)
    page = @agent.get("http://ol-jira.us.oracle.com/rest/api/latest/search?jql=key=#{@issue}&fields=*all")
    results = JSON.parse(page.body)
    print_issue(results["issues"][0], detailed = true)
  end

  def action(jira_page)
    send @action, jira_page
  end

  # jira_page.link_with("Resolve Issue")
  # jira_page.link_with("Start Progress")
  # jira_page.link_with("Create branch")
  # jira_page.link_with("Create")

  def go
    @agent = Mechanize.new do |agent|
      agent.follow_meta_refresh = true
      agent.add_auth("https://login.oracle.com", @username, @password)
    end

    @agent.get("http://ol-jira.us.oracle.com/browse/#{@issue}") do |page|
      log(page.uri)
      action(page)
    end
  end

  def self.handle_commandline
    options = {}
    opt_object = nil
    OptionParser.new do |opts|
      opts.banner = "Usage: oljira <issue_id> [options]"

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options[:verbose] = v
      end

      opts.on("-s", "--start", "Create a branch and start working on this issue.") do |v|
        options[:start] = true
      end

      opts.on("-l", "--list", "List issues assigned to me.") do |v|
        options[:list] = true
      end

      opts.on("-a", "--authenticate", "Ask (again) for username and password.") do |v|
        options[:login] = true
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      opt_object = opts
    end.parse!

    issue = ARGV.shift

    unless issue
      `git rev-parse --abbrev-ref HEAD` =~ /(GR-\d+)/
      issue = $1
    end

    unless issue && ARGV.empty?
      puts opt_object
      exit
    end

    return issue, options
  end

  def self.go
    new(*self.handle_commandline).go
  end
end


JiraHandler.go
