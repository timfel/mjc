#!/usr/bin/env ruby

require "optparse"
require "io/console"
require "json"

require "bundler/setup"
require "tty-prompt"
require "tty-cursor"
require "mechanize"
require "keyring"
require "paint"
require "vcr"
require "github_api"

begin
  require "pry"
rescue LoadError
end

CACHE_TIME = 3600
CACHE_DIR = "request_cache"
CACHE_FILE = "jira_cache"

VCR.configure do |config|
  config.cassette_library_dir = CACHE_DIR
  config.hook_into :webmock
  config.allow_http_connections_when_no_cassette = true
  config.default_cassette_options = {
    record: :new_episodes,
    re_record_interval: CACHE_TIME,
    allow_unused_http_interactions: true,
    match_requests_on: [:uri, :method],
  }
end


class Integer
  def day
    self * (60 * 60 * 24)
  end

  def week
    day * 7
  end

  def ago
    Time.now - self
  end
end


def patch_mechanize
  Mechanize.class_eval do
    alias_method :original_get, :get

    define_method :get do |*args, **kwargs, &block|
      result = VCR.use_cassette(CACHE_FILE) do
        original_get(*args, **kwargs)
      end
      if block
        block.call(result)
      else
        result
      end
    end
  end
end


class JiraHandler
  PROJECT_KEYRING_SERVICE = "ssojira-project"
  COMPONENTS_KEYRING_SERVICE = "ssojira-components"
  USERNAME_KEYRING_SERVICE = "ssojira-user"
  APP_KEYRING_USER = "ssojira-cli"
  PASSWORD_KEYRING_SERVICE = "ssojira-password"
  URL_KEYRING_SERVICE = "ssojira-url"
  AUTH_DOMAIN_SERVICE = "ssojira-authdomain"
  DEFAULT_ACTION = :show
  DEFAULT_USERNAME = `git config user.email`.chomp
  ASSIGNED_TO_ME = "assignee=currentuser()"
  STATUS_OPEN = "%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20"

  attr_accessor :issue, :action, :verbose, :pull_request_id, :tag, :github_url
  attr_reader :prompt, :cursor

  def initialize
    @verbose = false
    @prompt = TTY::Prompt.new
    @cursor = TTY::Cursor
    @action = DEFAULT_ACTION
  end

  @@requires_issue = [:show, :pull_request, :comment]

  def action=(symbol)
    if action == DEFAULT_ACTION
      @action = symbol
    else
      error "Multiple actions given: #{action.to_s} and #{symbol.to_s}"
    end
  end

  def error(str)
    puts str
    exit -1
  end

  def get_secret(service, user, txt, force, secret: true, default: "")
    result = @keyring.get_password(service, user)
    if !result || force
      result = (secret ? prompt.mask(txt) : prompt.ask(txt, default: default))
      @keyring.set_password(service, user, result)
    end
    result
  end

  def login(force = false)
    begin
      @keyring ||= Keyring.new
    rescue
      load File.expand_path(File.join("..", "mykeyring.rb"), File.realpath(__FILE__))
      @keyring ||= Keyring.new
    end
    @url ||= get_secret(URL_KEYRING_SERVICE, APP_KEYRING_USER, "JIRA Url: ", force, secret: false)
    @authdomain ||= get_secret(AUTH_DOMAIN_SERVICE, APP_KEYRING_USER, "Auth-Domain: ", force, secret: false)
    @username ||= get_secret(USERNAME_KEYRING_SERVICE, APP_KEYRING_USER, "Username: ", force, secret: false, default: DEFAULT_USERNAME)
    @password ||= get_secret(PASSWORD_KEYRING_SERVICE, APP_KEYRING_USER, "Password: ", force, secret: true)
    @project ||= get_secret(PROJECT_KEYRING_SERVICE, APP_KEYRING_USER, "JIRA default project: ", force, secret: false)
    @components ||= get_secret(COMPONENTS_KEYRING_SERVICE, APP_KEYRING_USER, "JIRA default components (comma-separated): ", force, secret: false)
  end

  def log(*args)
    puts args if verbose
  end

  def systemx(*args)
    exit -1 unless system(*args)
  end

  def list_issues(*jql)
    page = @agent.get("#{@url}/rest/api/2/search?jql=#{jql.join('+AND+')}")
    results = JSON.parse(page.body)
    results["issues"].map do |issue|
      format_issue(issue)
    end
  end

  def list(jira_page)
    list_issues(ASSIGNED_TO_ME, STATUS_OPEN).each { |i| puts i }
  end

  def list_last_week(jira_page)
    users = [
      '"Tim Felgentreff"',
      '"Cosmin Basca"',
      '"Florian Angerer"',
      '"Petr Pisl"'
    ].shuffle!

    puts "Please select the window to type in"
    window_name = `xdotool selectwindow getwindowname`.chomp

    users.each do |user|
      page = @agent.get("#{@url}/rest/api/2/search?jql=updated >%3D -1w AND assignee in (#{user}) AND component = Python ORDER BY status DESC")
      results = JSON.parse(page.body)

      system "xdotool search --name '#{window_name}' key Return Return"
      system "xdotool search --name '#{window_name}' type '@#{user[1...-1]}'"
      sleep 0.8
      system "xdotool search --name '#{window_name}' key Return" # accept user link
      sleep 0.8

      system "xdotool search --name '#{window_name}' key Return"
      system "xdotool search --name '#{window_name}' key minus space" # list
      sleep 0.8

      results["issues"].map do |issue|
        string = "#{@url}/browse/#{issue['key']}"
        system "printf '#{string}' | xclip -i -selection clipboard"
        sleep 0.1 # give time for async JS to run
        system "xdotool search --name '#{window_name}' key --clearmodifiers 'ctrl+v'"
        sleep 1 # give time for async JS to run
        system "xdotool search --name '#{window_name}' key Return"
      end
    end
    system "xdotool search --name '#{window_name}' windowactivate"
  end

  def find_transition(*names)
    # try to find transitions by common names
    page = @agent.get("#{@url}/rest/api/2/issue/#{@issue}/transitions")
    transitions = JSON.parse(page.body)["transitions"]
    names.each do |name|
      tid = transitions.find { |t| t["name"].downcase =~ /#{name.downcase}/ }
      return tid if tid
    end
    error "Could not find a transition for resolving an issue"
  end

  def find_resolve_transition
    find_transition("resolve issue", "resolve", "close issue", "close")
  end

  def find_start_transition
    find_transition("start progress", "start")
  end

  def find_stop_transition
    find_transition("stop progress", "stop")
  end

  def resolve(jira_page)
    unless @issue
      issue_list = ["(cancel)"]
      issue_list += list_issues(ASSIGNED_TO_ME)
      selection = prompt.select("Resolve what?", issue_list, per_page: 15)
      exit if selection == issue_list[0]
      @issue = /([A-Z]+-\d+)/.match(selection)[1]
    end

    data = {
      "fields" => {
        "resolution" => {
          "name" => "Fixed"
        }
      },
      "transition" => {
        "id" => find_resolve_transition["id"]
      }
    }

    page = @agent.post(
      "#{@url}/rest/api/2/issue/#{@issue}/transitions",
      data.to_json,
      'Content-Type' => 'application/json'
    )

    results = JSON.parse(page.body)
    puts(results)
  end

  def stop_progress(jira_page)
    unless @issue
      issue_list = ["(cancel)"]
      issue_list += list_issues(ASSIGNED_TO_ME)
      selection = prompt.select("Stop progress on what?", issue_list, per_page: 15)
      exit if selection == issue_list[0]
      @issue = /([A-Z]+-\d+)/.match(selection)[1]
    end

    data = {
      "fields" => {
        "resolution" => {
          "name" => "Fixed"
        }
      },
      "transition" => {
        "id" => find_stop_transition["id"]
      }
    }

    page = @agent.post(
      "#{@url}/rest/api/2/issue/#{@issue}/transitions",
      data.to_json,
      'Content-Type' => 'application/json'
    )

    results = JSON.parse(page.body)
    puts(results)
  end

  def github(jira_page)
    if /(?<ghuser>[^\/]+)\/(?<ghrepo>[^\/]+)\/pull\/(?<prid>\d+)/ =~ @github_url
      pr = Github::Client::PullRequests.new.get user: ghuser, repo: ghrepo, number: prid.to_i
      pr.title
      internal_issue = new_issue(jira_page, title: "Github issue #{prid}: #{pr.title}", body: <<-EOF)
      From #{pr.user.login}:
      {quote}
      #{pr.to_h['body']}
      {quote}
      EOF

      pull_branch = pr.head.ref
      pull_html_url = pr.head.repo.clone_url
      @issue = internal_issue["key"]
      start(@agent.get("#{@url}/browse/#{@issue}"))
      system "git fetch #{pull_html_url} #{pull_branch}"
      system "git merge FETCH_HEAD"
    elsif /(?<ghuser>[^\/]+)\/(?<ghrepo>[^\/]+)\/issues\/(?<prid>\d+)/ =~ @github_url
      pr = Github::Client::Issues.new.get user: ghuser, repo: ghrepo, number: prid.to_i
      pr.title
      internal_issue = new_issue(jira_page, title: "Github issue #{prid}: #{pr.title}", body: <<-EOF)
      From #{pr.user.login}:
      {quote}
      #{pr.to_h['body']}
      {quote}

      #{@github_url}
      EOF
    end
  end

  def pull_request(jira_page)
    origin_url = `git remote get-url origin`.chomp
    # switch to http(s)
    origin_url.sub!(/^ssh:\/\/([a-zA-Z0-9_]+@)?/, "https://")
    # remove ssh port
    origin_url.sub!(/:[0-9]+/, "")
    # transform repo path
    origin_url.sub!(/\/(?<project>\w+)\/(?<repo>[a-zA-Z0-9\-_]+)(\.git)?$/, '/projects/\k<project>/repos/\k<repo>')
    unless pull_request_id
      branches = `git branch --list`
      branches =~ /\s([^ ]+#{@issue}[^ ]+)/
      branch = $1
      if branch.nil?
        error "Could not find branch for issue #{@issue}"
      end
      prurl = "#{origin_url}/compare/commits?sourceBranch=refs/heads/#{branch}"
      command_success = false
      if RUBY_PLATFORM =~ /linux/
        command_success = system("xdg-open #{prurl}")
      elsif RUBY_PLATFORM =~ /windows/
        command_success = system("start #{prurl}")
      elsif RUBY_PLATFORM =~ /darwin/
        command_success = system("open #{prurl}")
      end
      puts "Open a PR at: #{prurl}" unless command_success
      id = prompt.ask "Enter pull-request ID (or nothing to cancel posting PR as a comment):"
      return unless id
    else
      id = pull_request_id
    end
    prviewurl = "#{origin_url}/pull-requests/#{id}/overview"
    if pull_request_id
      show(jira_page, detailed = false)
      return unless prompt.yes? "Post #{prviewurl} to #{@issue}?"
    end
    post_comment(jira_page, "Pull request: #{prviewurl}")
  end

  def comment(jira_page)
    comment = prompt.multiline("Enter comment (or nothing to not post a comment):").join
    return if comment.empty?
    post_comment(jira_page, comment)
  end

  def post_comment(jira_page, comment)
    data = { "body" => comment }

    page = @agent.post(
      "#{@url}/rest/api/2/issue/#{@issue}/comment",
      data.to_json,
      'Content-Type' => 'application/json'
    )

    results = JSON.parse(page.body)
    puts(results)
  end

  def new_issue(jira_page, title: nil, body: nil)
    unless title
      title = prompt.ask("Enter issue title (or nothing to cancel):")
      return unless title && !title.empty?
    end
    unless body
      body = prompt.multiline("Enter issue body").join
    end
    project = prompt.ask("Enter project:", default: @project)
    components = prompt.ask("Enter components (comma-separated):", default: @components)
    type = prompt.ask("Enter issue type (Bug, Improvement, Task, New Feature, ...)", default: "Bug")
    labels = prompt.ask("Enter issue labels (comma-separated, e.g. peak,startup,footprint,compatibility,security,platform,usability,cleanup,generic,documentation): ", default: "generic").split(",").map(&:strip)

    data = {
      "fields" => {
        "project" => {"key" => project},
        "components" => components.split(",").map { |c| {"name" => c} },
        "summary" => title,
        "labels" => labels,
        "description" => body,
        "issuetype" => {
          "name" => type,
        },
      }
    }

    page = @agent.post(
      "#{@url}/rest/api/2/issue",
      data.to_json,
      'Content-Type' => 'application/json'
    )

    results = JSON.parse(page.body)
    puts(results)
    results
  end

  def edit_issue(jira_page)
    page = @agent.get("#{@url}/rest/api/2/search?jql=key=#{@issue}&fields=*all")
    results = JSON.parse(page.body)
    log(results)

    issue = results["issues"][0]
    fields = issue["fields"]

    curTitle = fields['summary']
    title = prompt.ask("Title:", default: curTitle)

    curComp = fields['components'].map { |c| c["name"] }.join(',')
    components = prompt.ask("Components:", default: curComp)

    curType = fields['issuetype']['name']
    type = prompt.ask("Type:", default: curType)

    curLab = fields['labels'].join(',')
    labels = prompt.ask("Labels from peak,startup,footprint,compatibility,security,platform,usability,cleanup,generic,documentation:", default: curLab).split(",").map(&:strip)

    unless title == curTitle && components == curComp && type == curType && labels == curLab
      data = {
        "fields" => {
          "components" => components.split(",").map { |c| {"name" => c} },
          "summary" => title,
          "labels" => labels,
          "issuetype" => {
            "name" => type,
          }
        }
      }
      page = @agent.put(
        "#{@url}/rest/api/2/issue/#{@issue}",
        data.to_json,
        'Content-Type' => 'application/json'
      )
    else
      log("No updates")
    end

    availableVersions = @agent.get("#{@url}/rest/api/2/project/#{fields['project']['key']}/versions")
    availableVersions = JSON.parse(availableVersions.body).map { |v| v["name"] }.sort
    fixVersion = prompt.select("Change fix version from #{fields['fixVersions']}", ["(no change)"] + availableVersions)
    unless fixVersion == "(no change)"
      @agent.put(
        "#{@url}/rest/api/2/issue/#{@issue}",
        { "fields" => { "fixVersions" => [{ "name" => fixVersion }] } }.to_json,
        'Content-Type' => 'application/json'
      )
    end

    availablePrios = @agent.get("#{@url}/rest/api/2/priority")
    availablePrios = JSON.parse(availablePrios.body).map { |v| v["name"] }.sort
    priority = prompt.select("Change priority from #{fields['priority']}", ["(no change)"] + availablePrios)
    unless priority == "(no change)"
      @agent.put(
        "#{@url}/rest/api/2/issue/#{@issue}",
        { "fields" => { "priority" => { "name" => priority } } }.to_json,
        'Content-Type' => 'application/json'
      )
    end

    comment(jira_page)

    selection = prompt.select("Change state from #{fields['status']['name']}? ", ["(no)", "Start progress", "Stop progress", "Resolve"])
    case selection
    when "Start progress"
      just_start(jira_page)
    when "Stop progress"
      stop_progress
    when "Resolve"
      resolve
    else
      log("Not changing state")
    end
  end

  def print_issue(issue, detailed: false)
    puts format_issue(issue, detailed: detailed)
  end

  def format_issue(issue, detailed: false)
    out = []
    i = issue["fields"]
    key = issue["key"]
    begin
      key = Paint[key, i["status"]["statusCategory"]["colorName"].to_sym]
    rescue
      key = Paint[key, :white]
    end
    components = Paint["(#{i["components"].map { |c| c["name"] }.join(", ")})", "666"]
    url = Paint["#{@url}/browse/#{issue['key']}", "gray"]
    out << "#{key} '#{i['summary']}' -#{i['reporter']['displayName']} #{components} #{url}"

    if detailed
      unless (l = i['labels']).empty?
        out << "Labels: #{Paint[l.join(', '), "brown"]}"
      end

      unless (f = i['fixVersions'].map { |v| v['name'] }).empty?
        out << "Fix by: #{Paint[f.join(', '), "brown"]}"
      end

      out << "Priority: #{Paint[i['priority']['name'], "brown"]}"

      if i['description']
        out << "\nDescription:" << Paint["#{i['description']}\n"]
      end

      (i["comment"]&.[]("comments") || []).each do |comment|
        author = Paint["#{comment['author']['displayName']}", "gray"]
        body = Paint[comment['body']]
        out << "#{author}: #{body}\n\n"
      end
    end
    out.join("\n")
  end

  def require_issue(jira_page)
    error "No issue given" if @issue.nil?
    error "No such issue #{@issue}" unless jira_page.uri.to_s.end_with?(@issue)
  end

  def just_start(jira_page)
    unless @issue
      issue_list = ["(cancel)"]
      issue_list += list_issues(ASSIGNED_TO_ME, STATUS_OPEN)
      selection = prompt.select("Start working on what?", issue_list, per_page:  15)
      exit if selection == issue_list[0]
      @issue = /([A-Z]+-\d+)/.match(selection)[1]

      # we might have been called through another action, so when we restart,
      # run only this action and return to the caller
      begin
        act = @action
        @action = :just_start
        return go
      ensure
        @action = act
      end
    end

    require_issue(jira_page)
    yield if block_given?

    log("Starting progress")
    data = {
      "transition" => {
        "id" => find_start_transition["id"]
      }
    }
    page = @agent.post(
      "#{@url}/rest/api/2/issue/#{@issue}/transitions",
      data.to_json,
      'Content-Type' => 'application/json'
    )

    log("Assigning to me")
    data = {
      "assignee" => {
        "name" => "#{@username}"
      }
    }
    page = @agent.post(
      "#{@url}/rest/api/2/issue/#{@issue}",
      data.to_json,
      'Content-Type' => 'application/json'
    )
  end

  def start(jira_page)
    just_start(jira_page) do
      systemx "git checkout master && git pull"
      systemx "git checkout -b topic/#{@issue}"
    end
  end

  def show(jira_page, detailed: true)
    page = @agent.get("#{@url}/rest/api/2/search?jql=key=#{@issue}&fields=*all")
    results = JSON.parse(page.body)
    log(results)
    print_issue(results["issues"][0], detailed: detailed)
  end

  def open_branches(jira_page)
    branches = `git branch --list`.split("\n").map(&:chomp)
    worked_issues = {"(leave menu)" => nil}
    branch_prompt = "Switch to branch?"
    puts branch_prompt
    print "  ", worked_issues.keys.first, "\n"
    branches.each do |potential_issue_branch|
      if potential_issue_branch =~ /([a-zA-Z0-9]+\-[0-9]+)/
        potential_issue_name = $1
        begin
          page = @agent.get("#{@url}/rest/api/2/search?jql=key=#{potential_issue_name}")
        rescue
          next
        end
        results = JSON.parse(page.body)
        issue_json = results["issues"][0]
        if issue_json
          issuestr = "#{potential_issue_branch} - #{format_issue(issue_json, detailed: false)}"
          worked_issues[issuestr] = potential_issue_branch.chomp.sub(/^\*\s+/, "")
          print "  ", issuestr, "\n"
        end
      end
    end
    print cursor.up(worked_issues.size + 2)
    print cursor.clear_screen_down
    selected_issue = prompt.select(branch_prompt, worked_issues, per_page: 15)
    if selected_issue
      systemx "git checkout #{selected_issue}"
    end
  end

  def changelog(jira_page)
    things = []
    unless selected_tag = self.tag
      tags = `git tag --list`.split("\n").map(&:chomp)
      tags.unshift("Enter manually")
      selected_tag = prompt.select("Closed issues since when?", tags, per_page: 15)
    end
    if selected_tag
      if selected_tag == "Enter manually"
        ts = eval(prompt.ask("Since when (Ruby code)?", default: "1.week.ago"))
        puts "Needs a Time object" unless ts.is_a?(Time)
      else
        things = `git log --merges --pretty=format:%s #{selected_tag}..origin/master | grep -Pv '^Merge'`.split("\n").map(&:strip)
        ts = Time.at(`git log -1 --pretty=%at #{selected_tag}`.chomp.to_i)
      end
      tsjql = ts.strftime("%Y/%m/%d %H:%M")
      page = @agent.get("#{@url}/rest/api/2/search?jql=updated>='#{tsjql}'%20AND%20resolution%20is%20not%20EMPTY%20AND%20component=#{@components}")
      results = JSON.parse(page.body)
      issues = results["issues"]
      if issues
        issues.each do |issue|
          things << "[#{issue["key"]}] #{issue["fields"]["summary"]}"
        end
      end
    end
    puts things.sort.join("\n")
  end

  def do_action(jira_page)
    require_issue(jira_page) if @@requires_issue.include? action
    send action, jira_page
  end

  def go
    login

    @agent = Mechanize.new do |agent|
      agent.follow_meta_refresh = true
      agent.add_auth(@authdomain, @username, @password)
      agent.log = Logger.new(STDOUT) if verbose
    end

    @agent.get("#{@url}/browse/#{@issue}") do |page|
      log(page.uri)
      do_action(page)
    end
  end

  def self.handle_commandline
    jira = self.new
    should_patch = true
    OptionParser.new do |opts|
      opts.banner = "Usage: ssojira <issue_id> [options]"

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        jira.verbose = v
      end

      opts.on("-s", "--start", "Create a branch and start working on an issue (interactive if no issue given).") do |v|
        jira.action = :start
      end

      opts.on("--just-start", "Start progress on an issue (interactive if no issue given).") do |v|
        jira.action = :just_start
      end

      opts.on("-l", "--list", "List issues assigned to me.") do |v|
        jira.action = :list
      end

      opts.on("--list-last-week", "List issues touched by us in the last week") do |v|
        jira.action = :list_last_week
      end

      opts.on("-o", "--open-branches", "List branches that are open locally and their issues and optionally switch to one.") do |v|
        jira.action = :open_branches
      end

      opts.on("-a", "--authenticate", "Ask (again) for username and password.") do |v|
        jira.login(force = true)
      end

      opts.on("-r", "--resolve", "Resolve an open issue assigned to me") do |v|
        jira.action = :resolve
      end

      opts.on("-p", "--pull-request [ID]", "Open a PR for this issue, or post a PR url as comment on the issue") do |id, issue|
        jira.action = :pull_request
        jira.pull_request_id = id
      end

      opts.on("-g", "--github [URL]", "Import PR/issue from github, create Jira issue and PR") do |url, v|
        jira.action = :github
        jira.github_url = url
      end

      opts.on("-e", "--edit", "Edit an issue") do |v|
        jira.action = :edit_issue
      end

      opts.on("-c", "--comment", "Post a comment") do |v|
        jira.action = :comment
      end

      opts.on("-n", "--new", "Create a new issue") do |v|
        jira.action = :new_issue
      end

      opts.on("--changelog [TAG]", "Show changelog since a selected tag") do |v|
        self.clear_http_cache(Time.now)
        should_patch = false
        jira.action = :changelog
        jira.tag = v
      end

      opts.on("-f", "--refresh", "Don't use cache, force pulling fresh data.") do |v|
        self.clear_http_cache(Time.now)
        should_patch = false
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end.parse!

    patch_mechanize if should_patch
    clear_http_cache(Time.now - CACHE_TIME)

    jira.issue = ARGV.shift
    unless jira.action == :start
      # for start without an issue, we ask
      jira.issue ||= /([A-Z]+-\d+)/.match(`git rev-parse --abbrev-ref HEAD`)&.[](1)
    end
    jira
  end

  def self.clear_http_cache(offset)
    cachefile = "#{CACHE_DIR}/#{CACHE_FILE}.yml"
    File.unlink(cachefile) if File.exist?(cachefile) && File.ctime(cachefile) < offset
  end

  def self.go
    self.handle_commandline.go
  end
end


JiraHandler.go
